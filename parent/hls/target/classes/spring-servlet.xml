<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd" default-autowire="byName">
     <!-- 配置自动扫描 -->  
     <context:component-scan base-package="com.hls.*" />
     <!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:*/jdbc.properties" />
	<!-- <context:property-placeholder location="classpath:properties/log4j.properties" /> -->
	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置事物管理器 -->
	<bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- <property name="driverClassName" value="${jdbc.driverClassName}"/>  -->
        <property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="0"/>
        <property name="maxActive" value="100"/>
    </bean> 
    <!-- myBatis文件 -->
	<bean id="SessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--  <property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:com/hls/mapping/**/*.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hls.dao" />
		<property name="sqlSessionFactoryBeanName" value="SessionFactory" />
	</bean>
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".html"/>
    </bean>
    
    <!-- 配置连接redis -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${DBSync.testOnBorrow}" />
    </bean>
    <bean id="connectionFactory"
        class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="poolConfig" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg name="host" value="${redis.host}" />
					<!-- <constructor-arg name="port" value="${redis.port}" />
					<property name="password" value="${redis.password}" />
					<constructor-arg name="timeout" value="${redis.timeout}" />
					<constructor-arg name="weight" value="1" /> -->
				</bean>
			</list>
		</constructor-arg>
    </bean>
    <!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="keySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>

    <bean id="redisUtil" class="com.hls.utils.redis.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean> -->
    <!-- 自定义切面AOP -->
    <aop:aspectj-autoproxy proxy-target-class="true">
        <aop:include name="testAopAspect" />
    </aop:aspectj-autoproxy>
    <bean id="testAopAspect" class="com.hls.utils.aop.TestAopAspect"></bean>
</beans>